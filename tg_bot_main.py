from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from config import TOKEN_API
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import random
import string
roles = ['–¢—ã –º–∞—Ñ–∏—è - –í–µ—Ä–µ–≤–æ—á–∫–∏–Ω', '–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å - –í–æ—Å–∫–∞–Ω—è–Ω', '–¢—ã –∫–æ–º–∏—Å—Å–∞—Ä - –†–∞–π–≥–æ—Ä–æ–¥—Å–∫–∏–π',
         '–¢—ã –¥–æ–∫—Ç–æ—Ä - –ú–æ–ª—á–∞–Ω–æ–≤', '–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å - –ú–æ–Ω—á–µ–Ω–∫–æ', '–¢—ã –º–∞—Ñ–∏—è - –¢–∫–∞—á—ë–≤',
         '–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å - –ê–Ω–¥—Ä–µ–µ–≤', '–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å - –ü–∞–≤–ª–æ–≤–∞', '–¢—ã –º–∞—Ñ–∏—è - –ò–≤–∞–Ω–æ–≤–∞',
         '–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å - –ü–æ–¥–ª–µ—Å–Ω—ã—Ö']

bot = Bot(token=TOKEN_API)
dp = Dispatcher(bot)
players = []
choose_player = InlineKeyboardMarkup(row_width=2)
check_but = InlineKeyboardButton(text='–ß—Ç–æ-—Ç–æ',
                                 callback_data='–¢–æ –∂–µ —Å–∞–º–æ–µ')
choose_player.add(check_but)
chat_id = ''
keyboard = types.InlineKeyboardMarkup()
join_button = types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data='join_game')
keyboard.add(join_button)

game_text = '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–∏–∑—Ç–µ—Ö-–ú–∞—Ñ–∏—é!ü•∞ü•∞ü•∞
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—à–µ–º –º–∏—Ä–Ω–æ–º –≤—É–∑–µ –∑–∞–≤–µ–ª–∏—Å—å –Ω–µ–≥–æ–¥—è–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç
–≤–∏–¥, —á—Ç–æ –æ–Ω–∏ —á–µ—Å—Ç–Ω—ã–µ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –Ω–æ –ø–æ –Ω–æ—á–∞–º –æ–Ω–∏ —Ñ–∞—á–∞—Ç
–∑–∞ –¥–∞–∂–µ —Å–∞–º—ã–µ –º–µ–ª–∫–∏–µ –Ω–µ–¥–æ—á—ë—Ç—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∏ –¥–æ–º–∞—à–∫–∞—Ö –±–µ–¥–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –ª–∏—à–∏—Ç—å –∏—Ö –ø—Ä–µ–º–∏–∏!üòàüòàüòà
–ñ–µ–ª–∞—é —É–¥–∞—á–∏ —á–µ—Å—Ç–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º!
–ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é next day, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ç—Ä–∞'''

start_text = '''–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–±—Ä–∞–ª–æ—Å—å
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ Go'''


@dp.message_handler(Text(equals='Play'))
async def start_the_connection(message: types.Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id=message.chat.id,
                           text='–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ñ–∏–∑—Ç–µ—Ö-–ú–∞—Ñ–∏—é?üéÉüéÉüéÉ',
                           reply_markup=keyboard)


@dp.message_handler(Text(equals='Go'))
async def start_the_game(message: types.Message):
    if len(players) >= 1:
        await bot.send_message(chat_id=message.chat.id,
                               text=game_text)
        game_role = []
        buttons = []
        for i in range(len(players)):
            game_role.append(roles[i])
        random_role = random.sample(game_role, len(players))
        for j in range(len(players)):
            player = players[j]
            if random_role[j] == roles[0] or random_role[j] == roles[5] or random_role[j] == roles[8]:
                await bot.send_message(chat_id=player.id,
                                       text=f'{random_role[j]}')
                await bot.send_message(chat_id=player.id,
                                       text='''–í—ã–±–µ—Ä–∏ –∂–µ—Ä—Ç–≤—É
–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É Kill''')
            elif random_role[j] == roles[3]:
                await bot.send_message(chat_id=player.id,
                                       text=f'{random_role[j]}\n–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É check')
            elif random_role[j] == roles[4]:
                await bot.send_message(chat_id=player.id,
                                       text=f'{random_role[j]}\n–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ –≤—ã–ª–µ—á–∏—Ç—å\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É heal')
            else:
                await bot.send_message(chat_id=player.id,
                                       text=f'{random_role[j]}\n–ñ–¥–∏ —É—Ç—Ä–∞')
    else:
        await bot.send_message(chat_id=message.chat.id,
                               text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã')


@dp.message_handler(Text(equals='Kill'))
async def kill_command(message: types.Message):
    Kill_kb=InlineKeyboardMarkup()
    kill_buttons=[]
    for i in range(len(players)):
        kill_buttons.append(InlineKeyboardButton(text=f'{players[i].full_name}',
                                                 callback_data=f'Kill {players[i].full_name}'))
    Kill_kb.add(*kill_buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏ –∂–µ—Ä—Ç–≤—É',
                         reply_markup=Kill_kb)


@dp.message_handler(Text(equals='Heal'))
async def heal_command(message: types.Message):
    Heal_kb=InlineKeyboardMarkup()
    Heal_buttons=[]
    for i in range(len(players)):
        Heal_buttons.append(InlineKeyboardButton(text=f'{players[i].full_name}',
                                                 callback_data=f'Heal {players[i].full_name}'))
    Heal_kb.add(*Heal_buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –≤—ã–ª–µ—á–∏—Ç—å',
                         reply_markup=Heal_kb)


@dp.callback_query_handler(lambda c: c.data == 'join_game')
async def join_game(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    if user not in players:
        players.append(user)
        await bot.send_message(chat_id=user.id,
                               text='–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!')
        if user.full_name == 'Andrew':
            await bot.send_message(chat_id=callback_query.message.chat.id,
                                   text=f'{user.full_name} –∏–¥—ë—Ç –Ω–∞ –∑–∞–±–∏–≤üòé!')
        elif user.full_name == '–ê–π–¥–∞—Ä –ê–º–∞–Ω–∫—É–ª–æ–≤':
            await bot.send_message(chat_id=callback_query.message.chat.id,
                                   text=f'{user.full_name} –ö—ã—Ä–≥—ã–∑ –≤ –∑–¥–∞–Ω–∏–∏!')
        else:
            await bot.send_message(chat_id=callback_query.message.chat.id,
                                   text=f'{user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!')
        await callback_query.message.edit_text(text=f'''–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ñ–∏–∑—Ç–µ—Ö-–ú–∞—Ñ–∏—é?üéÉüéÉüéÉ?
{len(players)} —É–∂–µ –≤ –∏–≥—Ä–µü•≥ü•≥ü•≥''',
                                               reply_markup=keyboard)
        if len(players) >= 1:
            await bot.send_message(chat_id=callback_query.message.chat.id,
                                   text=start_text)
    else:
        await bot.send_message(chat_id=user.id,
                               text='–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!')

killed_players = []
healed_player = []
killed_player = []


@dp.message_handler(Text(equals='next day'))
async def next_round(message: types.Message):
    if (len(healed_player) == 1 and len(killed_player) == 1 and killed_player[0] == healed_player[0]) or len(killed_player) == 0:
        await bot.send_message(chat_id=message.chat.id,
                               text='''–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ —É–º–µ—Ä, –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å
–∫–æ–≥–æ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Ñ–∞–∫–µ—Ä–æ–º
–î–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ Vote''')
    elif len(killed_player) == 1:
        for player in players:
            if player == killed_player[0]:
                players.remove(player)
        await bot.send_message(chat_id=message.chat.id,
                               text=f'''–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é —É–º–µ—Ä(–ª–∞) {killed_player[0].full_name}, –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å
–∫–æ–≥–æ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Ñ–∞–∫–µ—Ä–æ–º
–î–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ Vote''')
    for i in range(len(killed_players)):
        killed_players.remove(killed_players[i])
    for j in range(len(healed_player)):
        healed_player.remove(healed_player[j])
    for t in range(len(killed_player)):
        killed_player.remove(killed_player)


@dp.message_handler(Text(equals='Vote'))
async def vote(message: types.Message):
    Vote_kb = InlineKeyboardMarkup()
    vote_buttons = []
    for i in range(len(players)):
        vote_buttons.append(InlineKeyboardButton(text=f'{players[i].full_name}',
                                                 callback_data=f'Vote {players[i].full_name}'))
    Vote_kb.add(*vote_buttons)
    await message.answer(text='''–í—ã–±–µ—Ä–∏ —Ñ–∞–∫–µ—Ä–∞
–ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –∑–∞–∫—Ä–æ–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç end vote''',
                         reply_markup=Vote_kb)


votes = []


@dp.message_handler(Text(equals='end vote'))
async def vote_results(message: types.Message):
    max_votes = []
    for i in range(len(players)):
        tmp = 0
        for j in range(len(votes)):
            if players[i] == votes[j]:
                tmp += 1
        max_votes.append(tmp)
    max_count = max(max_votes)
    flag = 0
    vote_res = -1
    for i in range(len(max_votes)):
        if max_votes == max_count and flag == 0 and i != (len(max_votes) - 1):
            vote_res = i
            flag += 1
        elif max_votes == max_count and flag != 0:
            await message.answer(text='''–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—ã–≥–Ω–∞–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—á—å,
–Ω–∞–ø–∏—à–∏—Ç–µ next night''')
        elif flag == 1 and i == (len(max_votes) - 1):
            await message.answer(text=f'''–í—ã –≤—ã–≥–Ω–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ {players[vote_res]},
—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—á—å, –Ω–∞–ø–∏—à–∏—Ç–µ next night''')
            players.remove(players[vote_res])
        elif max_votes == max_count and flag == 0 and i == (len(max_votes) - 1):
            vote_res = i
            await message.answer(text=f'''–í—ã –≤—ã–≥–Ω–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ {players[vote_res]},
            —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—á—å, –Ω–∞–ø–∏—à–∏—Ç–µ next night''')
            players.remove(players[vote_res])


@dp.callback_query_handler()
async def Kill_Heal_Vote(callback: types.CallbackQuery):
    for player in players:
        if callback.data == f'Kill {player.full_name}':
            killed_players.append(player)
            await callback.answer('–ú–æ–ª–æ–¥–µ—Ü, —É–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è—Ö')
        elif callback.data == f'Heal {player.full_name}':
            healed_player.append(player)
            await callback.answer('–ú–æ–ª–æ–¥–µ—Ü, –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç—ã —Å–ø–∞—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ—Ç –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è')
        elif callback.data == f'Vote {player.full_name}':
            votes.append(player)
            await bot.send_message(chat_id=callback.message.chat.id,
                                   text=f'''{callback.from_user.full_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –≤
{player.full_name}''')
    if len(killed_players) == 3:
        if killed_players[0] == killed_players[1]:
            killed_player.append(killed_players[0])
        elif killed_players[1] == killed_players[2]:
            killed_player.append(killed_players[1])
        elif killed_players[0] == killed_players[2]:
            killed_player.append(killed_players[1])
        else:
            killed_player.append(random.choice(killed_players))
    elif len(killed_players) == 2:
        killed_player.append(random.choice(killed_players))
    elif len(killed_player) == 1:
        killed_player.append(random.choice(killed_players))


async def on_startup(dp):
    print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
